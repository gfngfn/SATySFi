
let-block ctx +p it = line-break true true ctx (read-inline ctx it ++ inline-fil)

let-inline ctx \math m =
  embed-math ctx m

let standalone n bt =
  let multisep = 5pt in
  let all-text-width = 440pt in
  let one-column-width =
    (all-text-width -' (multisep *' float (n - 1))) *' (1.0 /. float n)
  in
  let shifts =
    let-rec sub m =
      if n == m then
        []
      else
        ((one-column-width +' multisep) *' float m) :: sub (m + 1)
    in
    sub 1
  in
  let ctx =
    get-initial-context one-column-width (command \math)
      |> set-dominant-narrow-script Latin
      |> set-dominant-wide-script Kana
  in
  let bb = read-block ctx bt in
  page-break-multicolumn A4Paper shifts (fun () -> block-nil) (fun () -> block-nil)
    (fun _ -> (|
      text-origin = (80pt, 100pt);
      text-height = 630pt;
    |))
    (fun _ -> (|
      header-origin  = (0pt, 0pt);
      header-content = block-nil;
      footer-origin  = (0pt, 0pt);
      footer-content = block-nil;
    |))
    bb
