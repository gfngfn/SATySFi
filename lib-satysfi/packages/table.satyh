
module Table : sig

  direct \tabular :  [
                        (|
                          l : inline-text -> cell;
                          r : inline-text -> cell;
                          c : inline-text -> cell;
                          m : int -> int -> inline-text -> cell;
                          e : cell;
                        |) -> (cell list) list;
                        length list -> length list -> graphics list;
                      ] inline-cmd

end = struct

  let table-scheme ctx pads cellssf decof =
    let nc ib = NormalCell(pads, ib) in
    let mc i j ib = MultiCell(i, j, pads, ib) in
    let cellss =
      cellssf (|
        l = (fun it ->
              nc (read-inline ctx it ++ inline-fil));
        r = (fun it ->
              nc (inline-fil ++ read-inline ctx it));
        c = (fun it ->
              nc (inline-fil ++ read-inline ctx it ++ inline-fil));
        m = (fun i j it ->
              mc i j (inline-fil ++ read-inline ctx it ++ inline-fil));
        e = EmptyCell;
      |)
    in
      tabular cellss decof


  let-inline ctx \tabular =
    let pads = (2pt, 2pt, 2pt, 2pt) in
      table-scheme ctx pads

end
