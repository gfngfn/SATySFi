@require: gr
@require: color
@require: geom

module Picture : sig
  type node
  type info
  val node : info -> point -> inline-text -> node
  val draw-node : node -> graphics list
  val draw-line : length -> color -> node -> node -> graphics list
  direct \picture : [length; length; info -> graphics list] inline-cmd
end = struct

  type node = point * graphics

  type info = context

  let node ctx pt it =
    let (x, y) = pt in
    let h = get-axis-height ctx in
    let gr = Gr.text-centering (x, y -' h) (read-inline ctx it) in
    let bbox = get-graphics-bbox gr in
      (pt, gr)

  let draw-node (_, gr) = [gr]

  let wpad = 2pt
    % -- padding width for objects

  let draw-line-scheme linef (((x1r, _), _) as node1r) (((x2r, _), _) as node2r) =

    let (node1, node2, reversed) =
      if not (x1r >' x2r) then (node1r, node2r, false) else (node2r, node1r, true)
    in
    let ((x1, y1), gr1) = node1 in
    let ((x2, y2), gr2) = node2 in
    % -- now we can suppose x1 <= x2
    let ((xL1, yL1), (xG1, yG1)) = get-graphics-bbox gr1 in
    let ((xL2, yL2), (xG2, yG2)) = get-graphics-bbox gr2 in
    let xL1 = xL1 -' wpad in
    let xG1 = xG1 +' wpad in
    let xL2 = xL2 -' wpad in
    let xG2 = xG2 +' wpad in
    let yL1 = yL1 -' wpad in
    let yG1 = yG1 +' wpad in
    let yL2 = yL2 -' wpad in
    let yG2 = yG2 +' wpad in
    let (pt1, pt2) =
      if x2 -' x1 <' 0.01pt then
        if y1 >' y2 then ((x1, yL1), (x1, yG2)) else ((x1, yG1), (x1, yL2))
      else if length-abs (y2 -' x1) <' 0.01pt then
        ((xG1, y1), (xL2, y1))
      else
        let a = (y2 -' y1) /' (x2 -' x1) in
        let ainv = 1. /. a in
        let b = y2 *' (x1 /' (x1 -' x2)) -' y1 *' (x2 /' (x1 -' x2)) in
        let (yL1, yG1, yL2, yG2) =
          if y1 >' y2 then (yL1, yG1, yL2, yG2) else (yG1, yL1, yG2, yL2)
        in
        let pt1 =
          let xC1 = (yL1 -' b) *' ainv in
          let yC1 = xG1 *' a +' b in
            if xC1 <' xG1 then (xC1, yL1) else (xG1, yC1)
        in
        let pt2 =
          let xC2 = (yG2 -' b) *' ainv in
          let yC2 = xL2 *' a +' b in
            if xC2 >' xL2 then (xC2, yG2) else (xL2, yC2)
        in
          (pt1, pt2)
    in
      if not reversed then
        linef pt1 pt2
      else
        linef pt2 pt1


  let draw-line thk color =
    draw-line-scheme
      (fun pt1 pt2 -> [ stroke thk color (start-path pt1 |> line-to pt2 |> terminate-path); ])


  let-inline ctx \picture wid hgt diagf =
      inline-graphics wid hgt 0cm (fun ptorg -> (
        (diagf ctx) |> List.map (shift-graphics ptorg)
      ))

end
