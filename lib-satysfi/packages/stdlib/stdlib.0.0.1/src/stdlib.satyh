use Basic
use Option
use List
use Length
use Logo
use Inline
use Block
use Arith
use Ref
use Geom
use Color
use Path
use Graphics
use PaperSize
use Deco
use HDecoSet
use VDecoSet

module Stdlib :> sig
  % Basic
  type ordering = Less | Equal | Greater
  type point = length * length
  type paren = length -> length -> context -> inline-boxes * (length -> length)
  module Option : sig
    type t 'a = option 'a
    val ~lift 'a : ('a -> code 'a) -> option 'a -> code (option 'a)
    val persistent ~compare 'a : ('a -> 'a -> ordering) -> option 'a -> option 'a -> ordering
    val persistent ~equal 'a : ('a -> 'a -> bool) -> option 'a -> option 'a -> bool
    val persistent ~map 'a 'b : ('a -> 'b) -> option 'a -> option 'b
    val persistent ~pure 'a : 'a -> option 'a
    val persistent ~bind 'a 'b : option 'a -> ('a -> option 'b) -> option 'b
    val persistent ~from 'a : 'a -> option 'a -> 'a
    val persistent ~is-none 'a : option 'a -> bool
  end
  module List : sig
    type t 'a = list 'a
    val ~lift 'a : ('a -> code 'a) -> list 'a -> code (list 'a)
    val persistent ~compare 'a : ('a -> 'a -> ordering) -> list 'a -> list 'a -> ordering
    val persistent ~equal 'a : ('a -> 'a -> bool) -> list 'a -> list 'a -> bool
    val persistent ~fold 'a 'b : ('a -> 'b -> 'a) -> 'a -> list 'b -> 'a
    val persistent ~fold-indexed 'a 'b : ('a -> int -> 'b -> 'a) -> 'a -> list 'b -> 'a
    val persistent ~fold-back 'a 'b : ('a -> 'b -> 'b) -> 'b -> list 'a -> 'b
    val persistent ~fold-adjacent 'a 'b : ('a -> 'b -> option 'b -> option 'b -> 'a) -> 'a -> list 'b -> 'a
    val persistent ~fold-indexed-adjacent 'a 'b : ('a -> int -> 'b -> option 'b -> option 'b -> 'a) -> 'a -> list 'b -> 'a
    val persistent ~reverse 'a : list 'a -> list 'a
    val persistent ~map 'a 'b : ('a -> 'b) -> list 'a -> list 'b
    val persistent ~map-indexed 'a 'b : (int -> 'a -> 'b) -> list 'a -> list 'b
    val persistent ~map-with-ends 'a 'b : (bool -> bool -> 'a -> 'b) -> list 'a -> list 'b
    val persistent ~map-adjacent 'a 'b : ('a -> option 'a -> option 'a -> 'b) -> list 'a -> list 'b
    val persistent ~map-indexed-adjacent 'a 'b : (int -> 'a -> option 'a -> option 'a -> 'b) -> list 'a -> list 'b
    val persistent ~append 'a : list 'a -> list 'a -> list 'a
    val persistent ~concat 'a : list (list 'a) -> list 'a
    val persistent ~pure 'a : 'a -> list 'a
    val persistent ~bind 'a 'b : list 'a -> ('a -> list 'b) -> list 'b
    val persistent ~iter 'a : ('a -> unit) -> list 'a -> unit
    val persistent ~iter-indexed 'a : (int -> 'a -> unit) -> list 'a -> unit
    val persistent ~filter 'a : ('a -> bool) -> list 'a -> list 'a
    val persistent ~filter-map 'a 'b : ('a -> option 'b) -> list 'a -> list 'b
    val persistent ~assoc 'a 'b : ('a -> 'a -> bool) -> 'a -> list ('a * 'b) -> option 'b
    val persistent ~length 'a : list 'a -> int
    val persistent ~nth 'a : int -> list 'a -> option 'a
    val persistent ~is-empty 'a : list 'a -> bool
  end
  module Length : sig
    type t = length
    val ~lift : length -> code length
    val persistent ~max : length -> length -> length
    val persistent ~min : length -> length -> length
    val persistent ~abs : length -> length
  end
  module Logo : sig
    val \SATySFi : inline []
    val \LaTeX : inline []
    val \TeX : inline []
  end
  module Inline : sig
    val get-natural-advance : inline-boxes -> length
    val kern : length -> inline-boxes
    val \skip : inline [length]
    val no-break : inline-boxes -> inline-boxes
    val \no-break : inline [inline-text]
    val \fil : inline []
    val \fil-both : inline []
    val mandatory-break : context -> inline-boxes
    val \mandatory-break : inline []
  end
  module Block : sig
    val form-paragraph : context -> inline-boxes -> block-boxes
    val +skip : block [length]
    val +clear-page : block []
  end
  module Arith : sig
    val persistent ~pi : float
  end
  module Ref : sig
    val persistent ~increment : ref int -> unit
    val persistent ~decrement : ref int -> unit
  end
  module Geom : sig
    val atan2-point : point -> point -> float
    val div-perp : point -> point -> float -> length -> point
  end
  module Color : sig
    val gray   : float -> color
    val rgb    : float -> float -> float -> color
    val black  : color
    val white  : color
    val red    : color
    val yellow : color
    val orange : color
    val blue   : color

    % web color names
    val brown   : color
    val cyan    : color
    val green   : color
    val magenta : color
    val pink    : color
    val purple  : color
  end
  module Path : sig
    val rectangle : point -> point -> path
    val rectangle-round : length -> point -> point -> path
    val rectangle-round-left : length -> point -> point -> path
    val rectangle-round-left-lower : length -> point -> point -> path
    val rectangle-round-left-upper : length -> point -> point -> path
    val rectangle-round-right : length -> point -> point -> path
    val poly-line : point -> list point -> path
    val polygon : point -> list point -> path
    val line : point -> point -> path
    val circle : point -> length -> path
    val linear-transform : float -> float -> float -> float -> path -> path
    val shift : length * length -> path -> path
    val rotate : point -> float -> path -> path
    val scale : point -> float -> float -> path -> path
  end
  module Graphics : sig
    val overlay : list graphics -> graphics
    val shift : length * length -> graphics -> graphics
    val linear-transform : float -> float -> float -> float -> graphics -> graphics
    val rotate : point -> float -> graphics -> graphics
    val scale : point -> float -> float -> graphics -> graphics
    val empty : graphics
    val text-centering : point -> inline-boxes -> graphics
    val text-leftward : point -> inline-boxes -> graphics
    val text-rightward : point -> inline-boxes -> graphics
    val arrow : length -> color -> length -> length -> length -> point -> point -> graphics
    val dashed-arrow : length -> length * length * length -> color -> length -> length -> length -> point -> point -> graphics
  end
  module PaperSize : sig
    val persistent ~a0 : length * length
    val persistent ~a1 : length * length
    val persistent ~a2 : length * length
    val persistent ~a3 : length * length
    val persistent ~a4 : length * length
    val persistent ~a5 : length * length
    val persistent ~a6 : length * length
    val persistent ~a7 : length * length
    val persistent ~a8 : length * length
    val persistent ~a9 : length * length
    val persistent ~a10 : length * length

    val persistent ~us-letter : length * length
    val persistent ~us-legal : length * length
  end
  module Deco : sig
    val empty : deco
    val simple-frame : length -> color -> color -> deco
  end
  module HDecoSet : sig
    val empty : deco-set
    val simple-frame-stroke : length -> color -> deco-set
    val rectangle-round-fill : length -> length -> color -> deco-set
  end
  module VDecoSet : sig
    val empty : deco-set
    val simple-frame-stroke : length -> color -> deco-set
    val simple-frame : length -> color -> color -> deco-set
    val paper : deco-set
    val quote-round : length -> length -> color -> deco-set
  end
end = struct
  include Basic
  module Option = Option
  module List = List
  module Length = Length
  module Logo = Logo
  module Inline = Inline
  module Block = Block
  module Arith = Arith
  module Ref = Ref
  module Geom = Geom
  module Color = Color
  module Path = Path
  module Graphics = Graphics
  module PaperSize = PaperSize
  module Deco = Deco
  module HDecoSet = HDecoSet
  module VDecoSet = VDecoSet
end
