module Inline :> sig
  val get-natural-advance : inline-boxes -> length
  val kern : length -> inline-boxes
  val \skip : inline [length]
  val no-break : inline-boxes -> inline-boxes
  val \no-break : inline [inline-text]
  val \fil : inline []
  val \fil-both : inline []
  val mandatory-break : context -> inline-boxes
  val \mandatory-break : inline []
end = struct

  val get-natural-advance ib =
    let (wid, _, _) = get-natural-metrics ib in
    wid

  val kern len = inline-skip (0pt -' len)

  val inline ctx \skip len =
    inline-skip len

  val no-break ib =
    inline-frame-outer (0pt, 0pt, 0pt, 0pt) (fun _ _ _ _ -> unite-graphics []) ib

  val inline ctx \no-break inner =
    no-break (read-inline ctx inner)

  val inline ctx \fil =
    discretionary 0 inline-nil inline-fil inline-nil

  val inline ctx \fil-both =
    discretionary 0 inline-nil inline-fil inline-fil

  val mandatory-break ctx =
    discretionary 0 (inline-skip (get-text-width ctx *' 2.)) inline-fil inline-nil

  val inline ctx \mandatory-break =
    mandatory-break ctx

end
