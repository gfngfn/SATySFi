
module Option :> sig
  val persistent ~map 'a 'b : ('a -> 'b) -> option 'a -> option 'b
  val persistent ~from 'a : 'a -> option 'a -> 'a
  val persistent ~bind 'a 'b : option 'a -> ('a -> option 'b) -> option 'b
  val persistent ~is-none 'a : option 'a -> bool
end = struct

  val persistent ~map f opt =
    match opt with
    | None    -> None
    | Some(v) -> Some(f v)
    end

  val persistent ~from a opt =
    match opt with
    | None    -> a
    | Some(a) -> a
    end

  val persistent ~bind opt f =
    match opt with
    | None    -> None
    | Some(v) -> f v
    end

  val persistent ~is-none opt =
    match opt with
    | None    -> true
    | Some(_) -> false
    end

end
