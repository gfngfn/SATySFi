use package open Stdlib
use package Math
use package Annot
use package Code
use package FootnoteScheme

use package FontJunicode
use package FontIpaEx
use package FontLatinModern
use package FontLatinModernMath

module StdJaBook :> sig

  val document :
    ?(
      show-page-number : bool,
      show-title       : bool,
      show-toc         : bool,
      paper-size       : length * length,
      text-width       : length,
      text-height      : length,
      text-origin      : Pervasives.point, %- TODO: remove this by using 'open'
      header-origin    : Pervasives.point,
      footer-origin    : Pervasives.point,
      header-width     : length,
      footer-width     : length,
    ) (|
      title  : inline-text,
      author : inline-text,
    |) -> block-text -> document

  val font-latin-roman  : font * float * float
  val font-latin-bold   : font * float * float
  val font-latin-italic : font * float * float
  val font-latin-sans   : font * float * float
  val font-latin-mono   : font * float * float
  val font-cjk-mincho   : font * float * float
  val font-cjk-gothic   : font * float * float
  val set-latin-font : (font * float * float) -> context -> context
  val set-cjk-font   : (font * float * float) -> context -> context

  val \ref : inline [string]
  val \ref-page : inline [string]
  val \figure : inline [?(label : string) inline-text, block-text]
  val +p : block [inline-text]
  val +pn : block [inline-text]
  val +section : block [?(label : string, outline-title : string) inline-text, block-text]
  val +subsection : block [?(label : string, outline-title : string) inline-text, block-text]
  val \emph : inline [inline-text]
  val \footnote : inline [inline-text]

end = struct

  type toc-element =
    | TOCElementSection    of string * inline-text
    | TOCElementSubsection of string * inline-text


  val generate-fresh-label =
    let mutable count <- 0 in
      (fun () -> (
        let () = count <- !count + 1 in
          `generated:` ^ (arabic (!count))
      ))


  val no-pads = (0pt, 0pt, 0pt, 0pt)


  val inline ctx \ref key =
    let opt = get-cross-reference (key ^ `:num`) in
    let it =
      match opt with
      | None    -> {?}
      | Some(s) -> embed-string s
      end
    in
    script-guard Latin (inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it))


  val inline ctx \ref-page key =
    let opt = get-cross-reference (key ^ `:page`) in
    let it =
      match opt with
      | None    -> {?}
      | Some(s) -> embed-string s
      end
    in
    inline-frame-breakable no-pads (Annot.link-to-location-frame key None) (read-inline ctx it)


  val font-size-normal  = 12pt
  val font-size-title   = 32pt
  val font-size-author  = 16pt
  val font-size-section = 18pt
  val font-size-subsection = 16pt

  val section-top-margin = 20pt
  val section-bottom-margin = 12pt
  val section-top-padding = 6pt
  val section-bottom-padding = 7pt
  val section-line-sep = 4pt
  val section-line-thickness1 = 2pt
  val section-line-thickness2 = 1pt
  val title-line-margin = 4pt
  val title-line-thickness = 1pt
  val header-line-thickness = 0.5pt
  val header-line-margin-top = 2pt
  val header-line-margin-bottom = 6pt

  val font-ratio-latin = 1.
  val font-ratio-cjk = 0.88

  val font-latin-roman  = (FontJunicode.normal , font-ratio-latin, 0.)
  val font-latin-bold   = (FontJunicode.bold   , font-ratio-latin, 0.)
  val font-latin-italic = (FontJunicode.italic , font-ratio-latin, 0.)
  val font-latin-sans   = (FontLatinModern.sans, font-ratio-latin, 0.)
  val font-latin-mono   = (FontLatinModern.mono, font-ratio-latin, 0.)
  val font-cjk-mincho   = (FontIpaEx.mincho    , font-ratio-cjk  , 0.)
  val font-cjk-gothic   = (FontIpaEx.gothic    , font-ratio-cjk  , 0.)


  val set-latin-font font ctx =
    ctx |> set-font Latin font


  val set-cjk-font font ctx =
    ctx |> set-font HanIdeographic font
        |> set-font Kana           font


  val get-standard-context wid =
    get-initial-context wid (command \Math.math)
      |> set-code-text-command (command \Code.code)
      |> set-dominant-wide-script Kana
      |> set-language Kana Japanese
      |> set-language HanIdeographic Japanese
      |> set-dominant-narrow-script Latin
      |> set-language Latin English
      |> set-font Kana           font-cjk-mincho
      |> set-font HanIdeographic font-cjk-mincho
      |> set-font Latin          font-latin-roman
      |> set-font OtherScript    font-latin-roman
      |> set-math-font FontLatinModernMath.main
      |> set-hyphen-penalty 100


  val mutable ref-float-boxes <- []


  val height-of-float-boxes pageno =
%    let () = display-message `get height` in
    (!ref-float-boxes) |> List.fold-left (fun h (pn, bb) -> (
      if pn < pageno then h +' (get-natural-length bb) else h
    )) 0pt


  val mutable ref-figure <- 0


  val inline ctx \figure ?(label = labelopt) caption inner =
    let () = ref-figure <- !ref-figure + 1 in
    let s-num = arabic (!ref-figure) in
    let () =
      match labelopt with
      | Some(label) -> register-cross-reference (label ^ `:num`) s-num
      | None        -> ()
      end
    in
    let it-num = embed-string s-num in
    let ds =
      match labelopt with
      | Some(label) -> Annot.register-location-frame label
      | None        -> let d (_, _) _ _ _ = Gr.empty in (d, d, d, d)
      end
    in
    let bb-inner =
      block-frame-breakable ctx (2pt, 2pt, 2pt, 2pt) ds (fun ctx -> (
        read-block ctx inner
          +++ line-break true true ctx (inline-fil ++ read-inline ctx {å›³#it-num; #caption;} ++ inline-fil)
      ))
    in
      hook-page-break (fun pbinfo _ -> (
%        let () = display-message (`register` ^ (arabic pbinfo#page-number)) in
        ref-float-boxes <- (pbinfo#page-number, bb-inner) :: !ref-float-boxes
      ))


val title-deco =
    let pads = (5pt, 5pt, 10pt, 10pt) in
    let deco (x, y) wid hgt dpt =
      let path1 =
        let cx = 14pt in
        let cy = 8pt in
        let xL = x in
        let xR = x +' wid in
        let yT = y +' hgt in
        let yB = y -' dpt in
          start-path (xL, yT)
            |> line-to (xR, yT)
            |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
            |> line-to (xL, yB)
            |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
      in
      let path2 =
        let cx = 12pt in
        let cy = 8pt in
        let gapx = 3pt in
        let gapy = 5pt in
        let xL = x +' gapx in
        let xR = x +' wid -' gapx in
        let yT = y +' hgt -' gapy in
        let yB = y -' dpt +' gapy in
          start-path (xL, yT)
            |> line-to (xR, yT)
            |> bezier-to (xR +' cx, yT -' cy) (xR +' cx, yB +' cy) (xR, yB)
            |> line-to (xL, yB)
            |> close-with-bezier (xL -' cx, yB +' cy) (xL -' cx, yT -' cy)
      in
        unite-graphics [
          stroke 3pt Color.black path1,
          stroke 1pt Color.black path2,
        ]
    in
    (deco, deco, deco, deco)


  val block ctx +make-title it-title it-author =
    let pads = (20pt, 20pt, 10pt, 10pt) in
    block-frame-breakable ctx pads title-deco (fun ctx -> (
      let ctx-title =
        ctx |> set-font-size font-size-title
            |> set-font Latin font-latin-roman
      in
      let ctx-author =
        ctx |> set-font-size font-size-author
            |> set-font Latin font-latin-roman
      in
      let ib-title = read-inline ctx-title it-title in
      let ib-line =
        let thk = title-line-thickness in
        let wid = get-text-width ctx in
        let path (x, y) =
          start-path (x, y +' thk *' 0.5)
            |> line-to (x +' wid, y +' thk *' 0.5)
            |> terminate-path
        in
        inline-graphics wid thk 0pt (fun pt -> (
          stroke thk Color.black (path pt)
        ))
      in
      let ib-author = read-inline ctx-author it-author in
      let bb-title =
%        if get-text-width ctx <' Pervasives.get-natural-width ib-title then
%          Pervasives.form-paragraph ctx-title (ib-title ++ inline-fil)
%        else
          Pervasives.form-paragraph (ctx-title |> set-paragraph-margin 12pt 0pt)
            (inline-fil ++ ib-title ++ inline-fil)
      in
      let bb-line =
        Pervasives.form-paragraph (ctx |> set-paragraph-margin title-line-margin title-line-margin)
          (ib-line ++ inline-fil)
      in
      let bb-author = Pervasives.form-paragraph ctx-author (inline-fil ++ ib-author) in
        bb-title +++ bb-line +++ bb-author
    ))


  val make-section-title ctx =
    ctx |> set-font-size font-size-section
        |> set-font Latin font-latin-sans
        |> set-cjk-font font-cjk-gothic


  val make-subsection-title ctx =
    ctx |> set-font-size font-size-subsection
        |> set-font Latin font-latin-sans
        |> set-cjk-font font-cjk-gothic


  val mutable toc-acc-ref <- []
  val mutable outline-ref <- []


  val get-cross-reference-number label =
    match get-cross-reference (label ^ `:num`) with
    | None    -> `?`
    | Some(s) -> s
    end


  val get-cross-reference-page label =
    match get-cross-reference (label ^ `:page`) with
    | None    -> `?`
    | Some(s) -> s
    end


  val section-heading ctx ib-heading =
    let wid = get-text-width ctx in
    let h = section-line-sep in
    let th1 = section-line-thickness1 in
    let th2 = section-line-thickness2 in
    let color = get-text-color ctx in
      line-break true false (ctx |> set-paragraph-margin section-top-margin 0pt)
        (inline-graphics wid h 0pt (fun (x, y) ->
          unite-graphics [
            stroke th1 color (Gr.line (x, y +' h) (x +' wid, y +' h)),
            stroke th2 color (Gr.line (x, y) (x +' wid, y)),
          ]))
    +++
      line-break false false (ctx |> set-paragraph-margin section-top-padding section-bottom-padding)
        ib-heading
    +++
      line-break false false (ctx |> set-paragraph-margin 0pt section-bottom-margin)
        (inline-graphics wid h 0pt (fun (x, y) ->
          unite-graphics [
            stroke th2 color (Gr.line (x, y +' h) (x +' wid, y +' h)),
            stroke th1 color (Gr.line (x, y) (x +' wid, y)),
          ]))


  val inline ctx \dummy it =
    let ib = read-inline (ctx |> set-text-color Color.white) it in
    let w = Pervasives.get-natural-width ib in
    ib ++ inline-skip (0pt -' w)


  val rec repeat-inline n ib =
    if n <= 0 then inline-nil else
      ib ++ (repeat-inline (n - 1) ib)


  val make-dots-line ctx w =
    let ib = read-inline ctx {.} ++ inline-skip 1pt in
    let wdot = Pervasives.get-natural-width ib in
    let n = round (w /' wdot) in
    inline-fil ++ (repeat-inline n ib)


  val document
    ?(
      show-page-number = show-page-number-opt,
      show-title       = show-title-opt,
      show-toc         = show-toc-opt,
      paper-size       = paper-size-opt,
      text-width       = text-width-opt,
      text-height      = text-height-opt,
      text-origin      = text-origin-opt,
      header-origin    = header-origin-opt,
      footer-origin    = footer-origin-opt,
      header-width     = header-width-opt,
      footer-width     = footer-width-opt,
    ) record inner =
    % -- mandatory designation --
    let title = record#title in
    let author = record#author in

    % -- optional designation --
    let show-pages = show-page-number-opt |> Option.from true in
    let show-title = show-title-opt |> Option.from true in
    let show-toc = show-toc-opt |> Option.from false in
    let page = paper-size-opt |> Option.from PaperSize.a4 in
    let txtwid = text-width-opt |> Option.from 440pt in
    let txthgt = text-height-opt |> Option.from 630pt in
    let txtorg = text-origin-opt |> Option.from (80pt, 100pt) in
    let hdrorg = header-origin-opt |> Option.from (40pt, 30pt) in
    let ftrorg = footer-origin-opt |> Option.from (40pt, 780pt) in
    let hdrwid = header-width-opt |> Option.from 520pt in
    let ftrwid = footer-width-opt |> Option.from 520pt in

    % -- constants --
    let thickness = header-line-thickness in

    let () =
      register-cross-reference `changed` `F`
    in

    let ctx-doc = get-standard-context txtwid in

    % -- title --
    let bb-title =
      if show-title then
        read-block ctx-doc '<+make-title(title)(author);>
      else
        block-nil
    in

    % -- main --
    let bb-main = read-block ctx-doc inner in

    % -- table of contents --
    let toc-subsection-indent = 20pt in
    let bb-toc =
      if not show-toc then
        block-nil
      else
        let ib-toc-title =
          read-inline (make-section-title ctx-doc) {ç›®æ¬¡} ++ inline-fil
        in
        let bb-toc-main =
          (!toc-acc-ref) |> List.reverse |> List.fold-left (fun bbacc tocelem -> (
            match tocelem with
            | TOCElementSection(label, title) ->
                let it-num = embed-string (get-cross-reference-number label) in
                let it-page = embed-string (get-cross-reference-page label) in
                let ib-title = read-inline ctx-doc {#it-num;. #title;} ++ inline-skip 3pt in
                let ib-page = inline-skip 3pt ++ read-inline ctx-doc it-page in
                let ib-middle =
                  let w = (get-text-width ctx-doc) -' (Pervasives.get-natural-width ib-title) -' (Pervasives.get-natural-width ib-page) in
                    if w <' 0pt then inline-fil else
                      make-dots-line ctx-doc w
                in
                  bbacc +++ line-break true true ctx-doc
                    (inline-frame-breakable no-pads (Annot.link-to-location-frame label None) (ib-title ++ ib-middle ++ ib-page))

          | TOCElementSubsection(label, title) ->
                let it-num = embed-string (get-cross-reference-number label) in
                let it-page = embed-string (get-cross-reference-page label) in
                let ib-indent = inline-skip toc-subsection-indent in
                let ib-title =
                  read-inline ctx-doc {#it-num;. #title;}
                    ++ inline-skip 3pt
                in
                let ib-page = inline-skip 3pt ++ read-inline ctx-doc it-page in
                let ib-middle =
                  let w = (get-text-width ctx-doc) -' (Pervasives.get-natural-width ib-indent)
                    -' (Pervasives.get-natural-width ib-title) -' (Pervasives.get-natural-width ib-page) in
                    if w <' 0pt then inline-fil else
                      make-dots-line ctx-doc w
                in
                  bbacc +++ line-break true true ctx-doc
                    (ib-indent ++ (inline-frame-breakable no-pads (Annot.link-to-location-frame label None) (ib-title ++ ib-middle ++ ib-page)))
            end
          )) block-nil
        in
          (section-heading ctx-doc ib-toc-title) +++ bb-toc-main
    in

    % -- page settings --
    let pagecontf pbinfo =
      let () = FootnoteScheme.start-page () in
      let hgtfb = height-of-float-boxes pbinfo#page-number in
      let (txtorgx, txtorgy) = txtorg in
      (|
        text-origin = (txtorgx, txtorgy +' hgtfb),
        text-height = txthgt -' hgtfb,
      |)
    in
    let pagepartsf pbinfo =
      let pageno = pbinfo#page-number in
      let header =
        let ctx =
          get-standard-context hdrwid
            |> set-paragraph-margin 0pt 0pt
        in
        let ib-text =
         if pageno mod 2 == 0 then
           (inline-fil ++ read-inline ctx title)
         else
           (read-inline ctx title ++ inline-fil)
        in
%        let () = display-message `insert` in
        let (bb-float-boxes, acc) =
          (!ref-float-boxes) |> List.fold-left (fun (bbacc, acc) elem -> (
            let (pn, bb) = elem in
              if pn < pageno then
                let bbs =
                  line-break true true (ctx |> set-paragraph-margin 0pt 12pt)
                    (inline-fil ++ embed-block-top ctx txtwid (fun _ -> bb) ++ inline-fil)
                      % 'ctx' is a dummy context
                in
                  (bbacc +++ bbs, acc)
              else
                (bbacc, elem :: acc)
          )) (block-nil, [])
        in
        let () = ref-float-boxes <- acc in
          line-break true true ctx ib-text
            +++ line-break true true (ctx |> set-paragraph-margin header-line-margin-top header-line-margin-bottom)
              ((inline-graphics hdrwid thickness 0pt
                (fun (x, y) -> fill Color.black (Gr.rectangle (x, y) (x +' hdrwid, y +' thickness)))) ++ inline-fil)
            +++ bb-float-boxes
      in
      let footer =
        if show-pages then
          let ctx = get-standard-context ftrwid in
          let it-pageno = embed-string (arabic pbinfo#page-number) in
            line-break true true ctx
              (inline-fil ++ (read-inline ctx {â€” #it-pageno; â€”}) ++ inline-fil)
        else
          block-nil
      in
        (|
          header-origin  = hdrorg,
          header-content = header,
          footer-origin  = ftrorg,
          footer-content = footer,
        |)
    in
    let doc = page-break page pagecontf pagepartsf (bb-title +++ bb-toc +++ bb-main) in
    let () = register-outline (List.reverse !outline-ref) in
      doc


  val mutable needs-indentation-ref <- true

  val mutable num-section <- 0
  val mutable num-subsection <- 0


  val quad-indent ctx =
    inline-skip (get-font-size ctx)


  val block ctx +p inner =
    let needs-indentation =
      if !needs-indentation-ref then true else
        let () = needs-indentation-ref <- true in
          false
    in
    let ib-inner = read-inline ctx inner in
    let br-parag =
      if needs-indentation then
        (quad-indent ctx) ++ ib-inner ++ inline-fil
      else
        ib-inner ++ inline-fil
    in
      Pervasives.form-paragraph ctx br-parag


  val block ctx +pn inner =
    let () = needs-indentation-ref <- true in
    let ib-inner = read-inline ctx inner in
      Pervasives.form-paragraph ctx (ib-inner ++ inline-fil)


  val section-scheme ctx label title outline-title-opt inner =
    let ctx-title = make-section-title ctx in
    let () = num-section <- !num-section + 1 in
    let () = num-subsection <- 0 in
    let () = needs-indentation-ref <- false in
    let s-num = arabic (!num-section) in
    let () = register-cross-reference (label ^ `:num`) s-num in
    let () = toc-acc-ref <- (TOCElementSection(label, title)) :: !toc-acc-ref in
    let ib-num =
      read-inline ctx-title (embed-string (s-num ^ `.`))
        ++ hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number))
    in
    let ib-title = read-inline ctx-title title in
    let outline-title = Option.from (extract-string ib-title) outline-title-opt in
    let () = outline-ref <- (0, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
    let bb-title =
      let ib =
        inline-frame-breakable no-pads (Annot.register-location-frame label)
          (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil))
      in
      section-heading ctx ib
    in
    let bb-inner = read-block ctx inner in
      bb-title +++ bb-inner


  val subsection-scheme ctx label title outline-title-opt inner =
    let () = num-subsection <- !num-subsection + 1 in
    let () = needs-indentation-ref <- false in
    let s-num = arabic (!num-section) ^ `.` ^ arabic (!num-subsection) in
    let () = register-cross-reference (label ^ `:num`) s-num in
    let () = toc-acc-ref <- (TOCElementSubsection(label, title)) :: !toc-acc-ref in
    let ctx-title = make-subsection-title ctx in
    let ib-num =
      read-inline ctx-title (embed-string (s-num ^ `.`))
        ++ hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `:page`) (arabic pbinfo#page-number))
    in
    let ib-title = read-inline ctx-title title in
    let outline-title = Option.from (extract-string ib-title) outline-title-opt in
    let () = outline-ref <- (1, s-num ^ `. `#  ^ outline-title, label, false) :: !outline-ref in
    let bb-title =
      line-break true false (ctx |> set-paragraph-margin section-top-margin section-bottom-margin)
        (inline-frame-breakable no-pads (Annot.register-location-frame label)
          (ib-num ++ (inline-skip 10pt) ++ ib-title ++ (inline-fil)))
    in
    let bb-inner = read-block ctx inner in
      bb-title +++ bb-inner


  val block ctx +section ?(label = labelopt, outline-title = outline-title-opt) title inner =
    let label =
      match labelopt with
      | None        -> generate-fresh-label ()
      | Some(label) -> label
      end
    in
    section-scheme ctx label title outline-title-opt inner


  val block ctx +subsection ?(label = labelopt, outline-title = outline-title-opt) title inner =
    let label =
      match labelopt with
      | None        -> generate-fresh-label ()
      | Some(label) -> label
      end
    in
      subsection-scheme ctx label title outline-title-opt inner


  val inline ctx \emph inner =
    let ctx-emph =
      ctx |> set-font Latin font-latin-italic
          |> set-cjk-font font-cjk-gothic
          |> set-text-color (CMYK(1., 0., 0., 0.))
    in
      read-inline ctx-emph inner


  val inline ctx \footnote it =
    let size = get-font-size ctx in
    let ibf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.75)
            |> set-manual-rising (size *' 0.25)
      in
        read-inline ctx {\*#it-num;}
    in
    let bbf num =
      let it-num = embed-string (arabic num) in
      let ctx =
        ctx |> set-font-size (size *' 0.9)
            |> set-leading (size *' 1.2)
            |> set-paragraph-margin (size *' 0.5) (size *' 0.5)
          %temporary
      in
        line-break false false ctx (read-inline ctx {#it-num; #it;} ++ inline-fil)
    in
      FootnoteScheme.main ctx ibf bbf

end
