#[config (|
  registries = [
    (|
      name = `default`,
      remote =
        Git(|
          url = `https://github.com/SATySFi/default-registry`,
          branch = `format-1`,
        |)
    |)
  ],
  dependencies = [
    (| name = `font-junicode`, registry = `default`, requirement = `^0.0.1` |),
    (| name = `font-ipa-ex`, registry = `default`, requirement = `^0.0.1` |),
    (| name = `font-latin-modern-math`, registry = `default`, requirement = `^0.0.1` |),
  ],
|)]
use package FontJunicode
use package FontIpaEx
use package FontLatinModernMath

let font-latin-roman = (FontJunicode.normal, 1., 0.) in
let font-cjk-mincho = (FontIpaEx.mincho, 0.88, 0.) in

let test1 ?(i = iopt) s =
  match iopt with
  | None    -> s
  | Some(i) -> s ^ `(` ^ (arabic i) ^ `)`
  end
in

let it = embed-string ((test1 `hoge`) ^ `/` ^ (test1 ?(i = 2) `piyo`) ^ `/` ^ (test1 `fuga`)) in

let inline ctx \math m = embed-math ctx (read-math ctx m) in
let ctx =
  get-initial-context 400pt (command \math)
    |> set-font Kana           font-cjk-mincho
    |> set-font HanIdeographic font-cjk-mincho
    |> set-font Latin          font-latin-roman
    |> set-font OtherScript    font-latin-roman
    |> set-math-font FontLatinModernMath.main
in
let paper-size = (210mm, 297mm) in %A4
let pagecontf _ = (| text-origin = (20pt, 20pt), text-height = 600pt, |) in
let pagepartsf _ =
  (| header-origin = (0pt, 0pt), header-content = block-nil,
     footer-origin = (0pt, 0pt), footer-content = block-nil, |)
in
page-break paper-size pagecontf pagepartsf (line-break true true ctx ((read-inline ctx it) ++ inline-fil))
