use package open Stdlib
use package open Math
use package FontJunicode
use package FontIpaEx
use package FontLatinModernMath

let font-latin-roman = (FontJunicode.normal, 1., 0.) in
let font-cjk-mincho = (FontIpaEx.mincho, 0.88, 0.) in

let sum = List.fold (+) 0 [3, 1, 4, 1, 5, 9, 2] in

let f t y =
  if t == 0 then y else t + 2
in
let g p q =
  match (p, q) with
  | (0, y) -> y
  | (t, _) -> t + 2
  end
in
let s = arabic sum ^ `,` ^ arabic (f 0 42) ^ `,` ^ arabic (f 1 42) ^ `,` ^ arabic (g 0 42) ^ `,` ^ arabic (g 1 42) in
let ctx =
  get-initial-context 400pt (command \math)
    |> set-font Kana           font-cjk-mincho
    |> set-font HanIdeographic font-cjk-mincho
    |> set-font Latin          font-latin-roman
    |> set-font OtherScript    font-latin-roman
    |> set-math-font FontLatinModernMath.main
in
let paper-size = PaperSize.a4 in
let pagecontf _ = (| text-origin = (20pt, 20pt), text-height = 600pt, |) in
let pagepartsf _ = (| header-origin = (0pt, 0pt), header-content = block-nil, footer-origin = (0pt, 0pt), footer-content = block-nil, |) in

page-break paper-size pagecontf pagepartsf (line-break true true ctx ((read-inline ctx (embed-string s)) ++ inline-fil))
